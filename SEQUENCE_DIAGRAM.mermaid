sequenceDiagram
    %% Define actors and components
    actor Client
    participant Flask_API as Flask API (app.py)
    participant ML_Library as ML Library (mlib.py)
    participant Scikit_learn as Scikit-learn
    participant MLflow
    participant Tuning as Hyperparameter Tuning (simple_hyperparam_tuning.py)
    participant SaveModel as Save Best Model (save_best_model.py)

    %% MLflow Server Management Flow
    rect rgb(230, 230, 255)
    note over Client, SaveModel: MLflow Server Management Flow
    Flask_API->>Flask_API: Check if MLflow server is running
    Flask_API->>+MLflow: Start MLflow server
    MLflow-->>-Flask_API: Server started successfully
    end

    %% Simple Tuning Flow
    rect rgb(200, 255, 200)
    note over Client, SaveModel: Simple Tuning Flow
    Client->>+Flask_API: Submit simple tuning form (POST /run_simple_tuning)
    Flask_API->>Flask_API: Process parameters from form
    Flask_API->>+Tuning: Run simple_hyperparam_tuning.py script
    Tuning->>Tuning: Generate synthetic data
    Tuning->>+Scikit_learn: Initialize and set up GridSearchCV
    Scikit_learn->>Scikit_learn: Cross-validation and tuning
    Scikit_learn-->>-Tuning: Return best model and parameters
    Tuning->>+MLflow: Log metrics, parameters and model
    MLflow-->>-Tuning: Confirm logging
    Tuning->>Tuning: Save results to tuning_results/*.json
    Tuning-->>-Flask_API: Tuning completed
    Flask_API-->>-Client: Redirect to home page with success message
    end

    %% Custom Tuning Flow
    rect rgb(220, 255, 220)
    note over Client, SaveModel: Custom Tuning Flow
    Client->>+Flask_API: Submit custom tuning form (POST /run_custom_tuning)
    Flask_API->>Flask_API: Process custom parameters from form
    Flask_API->>+Tuning: Run custom_hyperparam_tuning.py script
    Tuning->>Tuning: Read custom parameters
    Tuning->>Tuning: Generate synthetic data
    Tuning->>+Scikit_learn: GridSearchCV with custom parameter space
    Scikit_learn-->>-Tuning: Return best model and parameters
    Tuning->>+MLflow: Log metrics, parameters and model
    MLflow-->>-Tuning: Confirm logging
    Tuning-->>-Flask_API: Tuning completed
    Flask_API-->>-Client: Redirect to home page with success message
    end

    %% View Tuning Results Flow
    rect rgb(255, 240, 200)
    note over Client, SaveModel: View Tuning Results Flow
    Client->>+Flask_API: GET /view_result/<filename>
    Flask_API->>Flask_API: Read JSON file from tuning_results/
    Flask_API->>+MLflow: Get additional information from MLflow (if available)
    MLflow-->>-Flask_API: Return detailed information
    Flask_API-->>-Client: Render result_detail.html template
    end

    %% Find and Save Best Model Flow - UPDATED
    rect rgb(255, 220, 220)
    note over Client, SaveModel: Find and Save Best Model Flow
    alt Manual trigger via UI
        Client->>+Flask_API: Click "Find and Use Best Model" button
        Flask_API->>+Flask_API: JavaScript calls /find_best_model/1?metric=accuracy
        Flask_API->>+MLflow: Find run with highest accuracy
        MLflow-->>-Flask_API: Return best run information
        Flask_API-->>-Flask_API: Show success message
        Flask_API->>+Flask_API: JavaScript calls /run_save_best_model
    else API trigger
        Client->>+Flask_API: GET /run_save_best_model
    end
    Flask_API->>+SaveModel: Run save_best_model.py script
    SaveModel->>+MLflow: Find run with highest accuracy
    MLflow-->>-SaveModel: Return best run information
    SaveModel->>+MLflow: Download model artifacts
    MLflow-->>-SaveModel: Return model artifacts
    SaveModel->>SaveModel: Save model to models/best_model.joblib
    SaveModel->>SaveModel: Save model info to models/model_info.json
    SaveModel->>SaveModel: Register model in MLflow Model Registry
    SaveModel-->>-Flask_API: Model saving completed
    Flask_API-->>-Client: Redirect to home page with success message
    end

    %% Prediction Flow
    rect rgb(220, 220, 255)
    note over Client, SaveModel: Prediction Flow
    Client->>+Flask_API: POST /predict with feature data
    Flask_API->>Flask_API: Process feature data from form
    alt Use saved model
        Flask_API->>Flask_API: Load model from models/best_model.joblib
    else Use model from MLflow
        Flask_API->>+MLflow: Load model from MLflow run
        MLflow-->>-Flask_API: Return model
    end
    Flask_API->>Flask_API: Format features with format_features_for_prediction()
    Flask_API->>+Scikit_learn: model.predict() and model.predict_proba()
    Scikit_learn-->>-Flask_API: Return predictions and probabilities
    Flask_API-->>-Client: Render results on Classification tab
    end

    %% MLflow UI Access Flow
    rect rgb(220, 255, 255)
    note over Client, SaveModel: MLflow UI Access Flow
    Client->>+MLflow: Access MLflow UI (http://localhost:5002)
    MLflow-->>-Client: Display dashboard with runs and metrics
    end 